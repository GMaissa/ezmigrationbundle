# This file describes the format that you can use to define a migration running custom sql statements.
# For complex SQL code you might prefer to use a plain-sql-file migration definition instead of the yaml/json format,
# see the main README file for details about that

-
    type: 'sql'
    # You can define different sql statements at the same time for different database types
    # NB: the sql statement should not be a SELECT one, at least for MySQL
    mysql: ""
    oracle: ""
    postgresql: ""
    sqlite: ""
    # etc...

    # The list in references tells the manager to store specific values for later use by other steps in the current migration.
    # NB: these are NEW VARIABLES THAT YOU ARE CREATING. They are not used in the current migration step!
    references: # Optional
        -
            identifier: referenceId # A string used to identify the reference
            attribute: attributeId # The attribute to get the value of for the reference (supports: affected_rows)
    if: # Optional. If set, the migration step will be skipped unless the condition is matched
        "reference:_ref_name": # name of a reference to be used for the test
            _operator_: value # allowed operators: eq, gt, gte, lt, lte, ne, count, length, regexp, satisfies
